/*
* Unobtrusive autocomplete
*
* To use it, you just have to include the HTML attribute autocomplete
* with the autocomplete URL as the value
*
*   Example:
*       <input type="text" data-autocomplete="/url/to/autocomplete">
*
* Optionally, you can use a jQuery selector to specify a field that can
* be updated with the element id whenever you find a matching value
*
*   Example:
*       <input type="text" data-autocomplete="/url/to/autocomplete" data-id-element="#id_field">
*/(function(e){var t=null;e.fn.railsAutocomplete=function(){var t=function(){this.railsAutoCompleter||(this.railsAutoCompleter=new e.railsAutocomplete(this))};return e.fn.on!==undefined?e(document).on("focus",this.selector,t):this.live("focus",t)},e.railsAutocomplete=function(e){var t=e;this.init(t)},e.railsAutocomplete.fn=e.railsAutocomplete.prototype={railsAutocomplete:"0.0.1"},e.railsAutocomplete.fn.extend=e.railsAutocomplete.extend=e.extend,e.railsAutocomplete.fn.extend({init:function(t){function n(e){return e.split(t.delimiter)}function r(e){return n(e).pop().replace(/^\s+/,"")}t.delimiter=e(t).attr("data-delimiter")||null,t.min_length=e(t).attr("min-length")||2,t.append_to=e(t).attr("data-append-to")||null,t.autoFocus=e(t).attr("data-auto-focus")||!1,e(t).autocomplete({appendTo:t.append_to,autoFocus:t.autoFocus,delay:e(t).attr("delay")||0,source:function(n,i){var s=this.element[0],o={term:r(n.term)};e(t).attr("data-autocomplete-fields")&&e.each(e.parseJSON(e(t).attr("data-autocomplete-fields")),function(t,n){o[t]=e(n).val()}),e.getJSON(e(t).attr("data-autocomplete"),o,function(){arguments[0].length===0&&(arguments[0]=[],arguments[0][0]={id:"",label:"no existing match"}),e(arguments[0]).each(function(n,r){var i={};i[r.id]=r,e(t).data(i)}),i.apply(null,arguments),e(s).trigger("railsAutocomplete.source",arguments)})},change:function(t,n){if(!e(this).is("[data-id-element]")||e(e(this).attr("data-id-element")).val()==="")return;e(e(this).attr("data-id-element")).val(n.item?n.item.id:"");if(e(this).attr("data-update-elements")){var r=e.parseJSON(e(this).attr("data-update-elements")),i=n.item?e(this).data(n.item.id.toString()):{};if(r&&e(r.id).val()==="")return;for(var s in r){var o=e(r[s]);o.is(":checkbox")?i[s]!=null&&o.prop("checked",i[s]):o.val(n.item?i[s]:"")}}},search:function(){var e=r(this.value);if(e.length<t.min_length)return!1},focus:function(){return!1},select:function(r,i){if(i.item.value.toLowerCase().indexOf("no match")!=-1||i.item.value.toLowerCase().indexOf("too many results")!=-1)return e(this).trigger("railsAutocomplete.noMatch",i),!1;var s=n(this.value);s.pop(),s.push(i.item.value);if(t.delimiter!=null)s.push(""),this.value=s.join(t.delimiter);else{this.value=s.join(""),e(this).attr("data-id-element")&&e(e(this).attr("data-id-element")).val(i.item.id);if(e(this).attr("data-update-elements")){var o=i.item,u=i.item.value.indexOf("Create New")!=-1?!0:!1,a=e.parseJSON(e(this).attr("data-update-elements"));for(var f in a)e(a[f]).attr("type")==="checkbox"?o[f]===!0||o[f]===1?e(a[f]).attr("checked","checked"):e(a[f]).removeAttr("checked"):u&&o[f]&&o[f].indexOf("Create New")==-1||!u?e(a[f]).val(o[f]):e(a[f]).val("")}}var l=this.value;return e(this).bind("keyup.clearId",function(){e.trim(e(this).val())!=e.trim(l)&&(e(e(this).attr("data-id-element")).val(""),e(this).unbind("keyup.clearId"))}),e(t).trigger("railsAutocomplete.select",i),!1}})}}),e(document).ready(function(){e("input[data-autocomplete]").railsAutocomplete()})})(jQuery);